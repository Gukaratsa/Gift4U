@page "/"
@inject UserService _userService
@inject GiftService _giftService

@if(_userService.LoggedIn)
{
    if (pendingRequests.Count() > 0)
    {
        <h1>Odottavat pyynnöt</h1>
        @foreach (var pendingRequest in pendingRequests)
        {
            <img src="data:image/png;base64, @pendingRequest.GivenInRequest.Gift.Image" width="400"/>
            <br/>
            <p>
                @pendingRequest.GivenInRequest.Receiver.Email is requesting @pendingRequest.GivenInRequest.Gift.Name (@pendingRequest.GivenInRequest.Amount / WheresTheUsedAmount)
            </p>
            <button type="button" @onclick="@(() => AcceptRequest(pendingRequest))">Accept</button>
            <button type="button" @onclick="@(() => DeclineRequest(pendingRequest))">Decline</button>
            <br/>
        }
    }
    else if(acceptedRequests.Count() > 0)
    {
        <h1>Hyväksytyt pyynnöt</h1>
        @foreach (var pendingRequest in acceptedRequests)
        {
            <img src="data:image/png;base64, @pendingRequest.GivenInRequest.Gift.Image" width="400"/>
            <br/>
            <p>
                @pendingRequest.GivenInRequest.Receiver.Email is requesting @pendingRequest.GivenInRequest.Gift.Name (@pendingRequest.GivenInRequest.Amount / WheresTheUsedAmount)
            </p>
            <button type="button" @onclick="@(() => StartAcceptRequest(pendingRequest))">Start</button>
            <br/>
        }
    }
    else
    {
        <h1>Saadut lahjat</h1>
        @foreach (var gift in gifts)
        {
            <div @onclick="@(() => ClickedOnReceivedGift(@gift.Id))">
                <img src="data:image/png;base64, @gift.Gift.Image" width="400"/>
                <br/>
                <p>
                    @gift.Gift.Name - @gift.Amount
                </p>
            </div>
        }
    }
    <button type="button" @onclick="Logout">Logout</button>
}
@if(!_userService.LoggedIn)
{
    <h2>Login</h2>
    <EditForm Model="@loginUser" OnValidSubmit="@HandleValidLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table>
            <tbody>
                <tr>
                    <td style="text-align:right">Email: </td>
                    <td><InputText id="email" placeholder="name@email.com" @bind-Value="loginUser.Email" /></td>
                </tr>
                <tr>
                    <td style="text-align:right">Password: </td>
                    <td><InputText type="password" placeholder="Password" @bind-Value="@loginUser.Password" /></td>
                </tr>
            </tbody>
        </table>

        <button type="submit">Login</button>
    </EditForm>
}
<br/>

@code {
    private LoginUserModel loginUser = new();
    private IEnumerable<GivenGift> gifts;
    private IEnumerable<Request> pendingRequests;
    private IEnumerable<Request> acceptedRequests;


    //private IEnumerable<GiftModel> gifts = new GiftModel[]
    //    {
    //        new GiftModel(){ 
    //            ImageSource = "images/ExampleImage_1.png",
    //            GiftName = "Example Gift 1",
    //            GiftAmount = "48",
    //            GiftUnit = "pce" },
    //        new GiftModel(){ 
    //            ImageSource = "images/ExampleImage_2.png",
    //            GiftName = "Example Gift 2",
    //            GiftAmount = "6",
    //            GiftUnit = "pce" }
    //    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if(_userService.LoggedIn)
        {
            pendingRequests = _giftService.PendingRequests(_userService.CurrentUser.Id);
            acceptedRequests = _giftService.RequestsAccepted(_userService.CurrentUser.Id);
            gifts = _giftService.GetGifts(_userService.CurrentUser.Id);
        }
    }

    private void HandleValidLogin()
    {
        try
        {
            _userService.Login(loginUser.Email, loginUser.Password);
            if(_userService.LoggedIn)
            {
                pendingRequests = _giftService.PendingRequests(_userService.CurrentUser.Id);
                acceptedRequests = _giftService.RequestsAccepted(_userService.CurrentUser.Id);
                gifts = _giftService.GetGifts(_userService.CurrentUser.Id);
            }
        }
        catch (Exception ex) { Console.WriteLine(ex.ToString()); }
    }

    private void Logout() => _userService.Logout();

    private void ClickedOnReceivedGift(Guid givenGiftId)
    {
        _giftService.RequestGiftActivation(givenGiftId);
    }

    private void AcceptRequest(Request request)
    {
        _giftService.ResponseToGiftActivation(request, RequestStateEnum.RequestApproved);
    }

    private void DeclineRequest(Request request)
    {
        _giftService.ResponseToGiftActivation(request, RequestStateEnum.RequestDenied);
    }

    private void StartAcceptRequest(Request request)
    {
        _giftService.ActivateGift(request);
    }
}