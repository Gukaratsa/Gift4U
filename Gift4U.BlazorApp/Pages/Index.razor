@page "/"
@inject UserService _userService
@inject GiftService _giftService
@inject GiftStore _giftStore
@inject TimerStore _timerStore

@if(_userService.LoggedIn)
{
    if(TimerEnabled)
    {
        <p>
            Timer <br/>
            @_timerStore.GetState().CurrentTime <br/>
            @_timerStore.GetState().TotalTime <br/>
        </p>
    }
    else if (pendingRequests != null && pendingRequests.Count() > 0)
    {
        <h1>Odottavat pyynnöt</h1>
        @foreach (var pendingRequest in pendingRequests)
        {
            <img src="data:image/png;base64, @pendingRequest.GivenInRequest.Gift.Image" width="400"/>
            <br/>
            <p>
                @pendingRequest.GivenInRequest.Receiver.Email is requesting @pendingRequest.GivenInRequest.Gift.Name (@pendingRequest.GivenInRequest.Used/@pendingRequest.GivenInRequest.Amount)
            </p>
            <button type="button" @onclick="@(() => AcceptRequest(pendingRequest))">Accept</button>
            <button type="button" @onclick="@(() => DeclineRequest(pendingRequest))">Decline</button>
            <br/>
        }
    }
    else if(acceptedRequests != null && acceptedRequests.Count() > 0)
    {
        <h1>Hyväksytyt pyynnöt</h1>
        @foreach (var pendingRequest in acceptedRequests)
        {
            <img src="data:image/png;base64, @pendingRequest.GivenInRequest.Gift.Image" width="400"/>
            <br/>
            <p>
                @pendingRequest.GivenInRequest.Receiver.Email has accepted @pendingRequest.GivenInRequest.Gift.Name (@pendingRequest.GivenInRequest.Used/@pendingRequest.GivenInRequest.Amount)
            </p>
            <button type="button" @onclick="@(() => StartAcceptRequest(pendingRequest))">Start</button>
            <br/>
        }
    }
    else
    {
        <h1>Saadut lahjat</h1>
        @foreach (var gift in gifts)
        {
            <div @onclick="@(() => ClickedOnReceivedGift(@gift.Id))">
                <div class="container" style="position: relative; left: 0; top: 0;">
                    <img src="data:image/png;base64, @gift.Gift.Image" width="400"/>
                    @if (@gift.Requests != null && @gift.Requests.Count(r => r.RequestState.Name == nameof(RequestStateEnum.Pending)) > 0)
                    {
                        <div class="centered">PENDING</div>
                    }
                </div>
                <br/>
                <div class="container">
                    @gift.Gift.Name - @gift.Used/@gift.Amount
                </div>
            </div>
        }
    }

    <button type="button" @onclick="Logout">Logout</button>
}
@if(!_userService.LoggedIn)
{
    <h2>Login</h2>
    <EditForm Model="@loginUser" OnValidSubmit="@HandleValidLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table>
            <tbody>
                <tr>
                    <td style="text-align:right">Email: </td>
                    <td><InputText id="email" placeholder="name@email.com" @bind-Value="loginUser.Email" /></td>
                </tr>
                <tr>
                    <td style="text-align:right">Password: </td>
                    <td><InputText type="password" placeholder="Password" @bind-Value="@loginUser.Password" /></td>
                </tr>
            </tbody>
        </table>

        <button type="submit">Login</button>
    </EditForm>
}
<br/>

@code {
    private LoginUserModel loginUser = new();
    private IEnumerable<GivenGift> gifts;
    private IEnumerable<Request> pendingRequests;
    private IEnumerable<Request> acceptedRequests;

    private IObserver<GiftState> giftObserver;
    private IDisposable giftUnsubscriper;

    private IObserver<TimerState> timerObserver;
    private IDisposable timerUnsubscriper;

    private bool TimerEnabled = false;

    //private IEnumerable<GiftModel> gifts = new GiftModel[]
    //    {
    //        new GiftModel(){ 
    //            ImageSource = "images/ExampleImage_1.png",
    //            GiftName = "Example Gift 1",
    //            GiftAmount = "48",
    //            GiftUnit = "pce" },
    //        new GiftModel(){ 
    //            ImageSource = "images/ExampleImage_2.png",
    //            GiftName = "Example Gift 2",
    //            GiftAmount = "6",
    //            GiftUnit = "pce" }
    //    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if(_userService.LoggedIn)
        {
            pendingRequests = _giftService.PendingRequests(_userService.CurrentUser.Id);
            acceptedRequests = _giftService.RequestsAccepted(_userService.CurrentUser.Id);
            gifts = _giftService.GetGifts(_userService.CurrentUser.Id);
        }

        giftObserver = new Observer<GiftState>(
            async(cs) => 
            {
            // If current user is either receiver or giver update view
            if (_userService.LoggedIn &&
                            (cs.ActivatorId == _userService.CurrentUser.Id ||
                            cs.ReceiverId == _userService.CurrentUser.Id))
                    if (cs.NewState == RequestStateEnum.RequestStarted)
                        StartTimer(cs.GivenGiftId);
                await InvokeAsync(() => { StateHasChanged(); });
            },
            (ex) => Console.WriteLine(ex.ToString()),
            () => Console.WriteLine("Completed gift state"));

        giftUnsubscriper = _giftStore.Subscribe(giftObserver);

        timerObserver = new Observer<TimerState>(
            async (cs) =>
            { 
                if(_userService.LoggedIn &&
                    (cs.GiverId == _userService.CurrentUser.Id ||
                    cs.ReceiverId == _userService.CurrentUser.Id))
                    await InvokeAsync(() => 
                    {
                        TimerEnabled = true;
                        StateHasChanged(); 
                    });
            },
            (ex) => Console.WriteLine(ex.ToString()),
            async () =>
            {
                await InvokeAsync(() =>
                {
                    TimerEnabled = false;
                    StateHasChanged();
                });
            });

        giftUnsubscriper = _timerStore.Subscribe(timerObserver);
    }

    private TimeSpan? giftDuration;    
    private TimeSpan? usedDuration;
    private void StartTimer(Guid givenGiftId)
    {
        var givenGift = _giftService.GetGivenGift(givenGiftId);
        var duration = _giftService.GetGiftDuration(givenGift.GiftId);
        if (duration != null)
        {
            giftDuration = duration;
            usedDuration = TimeSpan.FromSeconds(0);

            _timerStore.Broadcast_Change(
                givenGift.GiverId,
                givenGift.ReceiverId,
                givenGift.Id,
                false,
                false,
                usedDuration.Value,
                giftDuration.Value);

            System.Timers.Timer tmr = new System.Timers.Timer(1000);
            tmr.Elapsed += ((sender, e) =>
            {
                usedDuration += TimeSpan.FromSeconds(1);
                if(usedDuration >= giftDuration)
                {
                    var tmr = (System.Timers.Timer)sender;
                    tmr.Stop();
                    tmr.Dispose();

                    _timerStore.Broadcast_Change(
                        givenGift.GiverId,
                        givenGift.ReceiverId,
                        givenGift.Id,
                        false,
                        true,
                        usedDuration.Value,
                        giftDuration.Value);
                }
                else
                {
                    _timerStore.Broadcast_Change(
                        givenGift.GiverId,
                        givenGift.ReceiverId,
                        givenGift.Id,
                        false,
                        false,
                        usedDuration.Value,
                        giftDuration.Value);
                };
            });
            tmr.Start();
        }
    }

    private void HandleValidLogin()
    {
        try
        {
            _userService.Login(loginUser.Email, loginUser.Password);
            if(_userService.LoggedIn)
            {
                pendingRequests = _giftService.PendingRequests(_userService.CurrentUser.Id);
                acceptedRequests = _giftService.RequestsAccepted(_userService.CurrentUser.Id);
                gifts = _giftService.GetGifts(_userService.CurrentUser.Id);
            }
        }
        catch (Exception ex) { Console.WriteLine(ex.ToString()); }
    }

    private void Logout() => _userService.Logout();

    private void ClickedOnReceivedGift(Guid givenGiftId)
    {
        var request = _giftService.RequestGiftActivation(givenGiftId);
        if(request != null)
            BroadcastGiftStateChange(request, RequestStateEnum.Pending);
    }

    private void AcceptRequest(Request request)
    {
        _giftService.ResponseToGiftActivation(request, RequestStateEnum.RequestApproved);
        BroadcastGiftStateChange(request, RequestStateEnum.RequestApproved);
    }

    private void DeclineRequest(Request request)
    {
        _giftService.ResponseToGiftActivation(request, RequestStateEnum.RequestDenied);
        BroadcastGiftStateChange(request, RequestStateEnum.RequestDenied);
    }

    private void StartAcceptRequest(Request request)
    {
        _giftService.ActivateGift(request);
        BroadcastGiftStateChange(request, RequestStateEnum.RequestStarted);
    }

    private void BroadcastGiftStateChange(Request request, RequestStateEnum requestStateEnum)
    {
          _giftStore.Broadcast_Change(
           request.GivenInRequest.GiverId,
           request.GivenInRequest.ReceiverId,
           request.GivenInRequest.Id,
           requestStateEnum);
    }
}